const Order = require('../models/Order');
const OrderDetail = require('../models/OrderDetail');
const PaymentMethod = require("../models/PaymentMethod");
const mongoose = require("mongoose");

class OrderService {
    async generateOrderCode() {
        let orderCode;
        let isUnique = false;

        while (!isUnique) {
            const randomNum = Math.floor(100000 + Math.random() * 900000); // 6 ch·ªØ s·ªë
            orderCode = `MBM-${randomNum}`;
            const existingOrder = await Order.findOne({ order_code: orderCode });
            if (!existingOrder) {
                isUnique = true;
            }
        }

        return orderCode;
    }
    async updateOrder(orderId, updateData) {
        try {
            // C·∫≠p nh·∫≠t th√¥ng tin Order
            const updatedOrder = await Order.findByIdAndUpdate(orderId, updateData, { new: true });

            if (!updatedOrder) {
                throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
            }

            // X√≥a OrderDetail c≈© tr∆∞·ªõc khi th√™m d·ªØ li·ªáu m·ªõi
            await OrderDetail.deleteMany({ id_order: orderId });

            // Th√™m OrderDetail m·ªõi t·ª´ updateData.details
            if (updateData.details && updateData.details.length > 0) {
                const orderDetails = updateData.details.map(product => ({
                    id_order: orderId,
                    id_product: product.id_product,
                    total_amount: product.price || product.price * product.quantity, // Tr√°nh l·ªói thi·∫øu total
                    quantity: product.quantity,
                    name: product.name
                }));

                await OrderDetail.insertMany(orderDetails);
            }

            return updatedOrder;
        } catch (error) {
            throw new Error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng: " + error.message);
        }
    }

    async createOrder(orderData, products, paymentData) {
        const session = await mongoose.startSession();
        console.log("üü¢ B·∫Øt ƒë·∫ßu session:", session.id);

        session.startTransaction();
        console.log("üîÑ Transaction b·∫Øt ƒë·∫ßu");

        try {
            const orderCode = await this.generateOrderCode();
            console.log("üìå M√£ ƒë∆°n h√†ng:", orderCode);

            // **T·∫°o ƒë∆°n h√†ng tr∆∞·ªõc**
            const order = new Order({
                ...orderData,
                order_code: orderCode,
            });
            const savedOrder = await order.save({ session });
            console.log("‚úÖ ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o:", savedOrder._id);

            // **X·ª≠ l√Ω ph∆∞∆°ng th·ª©c thanh to√°n**
            const paymentMethod = orderData.payment_method || "cash"; // M·∫∑c ƒë·ªãnh l√† 'cash' n·∫øu kh√¥ng c√≥ gi√° tr·ªã

            const fullPaymentData = {
                payment_name: paymentMethod, // cash, momo, vnpay
                status: "pending", // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh

            };

            // Ghi log ƒë·ªÉ ki·ªÉm tra
            console.log("üìå D·ªØ li·ªáu thanh to√°n tr∆∞·ªõc khi l∆∞u:", fullPaymentData);

            // **T·∫°o ph∆∞∆°ng th·ª©c thanh to√°n**
            const payment = new PaymentMethod(fullPaymentData);
            const savedPayment = await payment.save({ session });
            console.log("‚úÖ Ph∆∞∆°ng th·ª©c thanh to√°n ƒë∆∞·ª£c t·∫°o:", savedPayment._id);

            // **T·∫°o chi ti·∫øt ƒë∆°n h√†ng**
            const orderDetails = products.map(product => ({
                id_order: savedOrder._id,
                id_product: product.id_product,
                price: product.price,
                quantity: product.quantity,
                name: product.name
            }));

            await OrderDetail.insertMany(orderDetails, { session });
            console.log("‚úÖ Chi ti·∫øt ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o:", orderDetails.length, "m·ª•c");

            // **C·∫≠p nh·∫≠t ID ph∆∞∆°ng th·ª©c thanh to√°n v√†o ƒë∆°n h√†ng**
            await Order.updateOne(
                { _id: savedOrder._id },
                { id_payment_method: savedPayment._id },
                { session }
            );
            console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n v√†o ƒë∆°n h√†ng");

            // **Commit transaction**
            await session.commitTransaction();
            console.log("üéâ Transaction commit th√†nh c√¥ng!");

            session.endSession();
            return { order: savedOrder, payment: savedPayment };
        } catch (error) {
            console.error("‚ùå L·ªói! Rollback transaction:", error);
            await session.abortTransaction();
            session.endSession();
            throw new Error("L·ªói khi t·∫°o ƒë∆°n h√†ng v√† thanh to√°n: " + error.message);
        }
    }






    async getAllOrders() {
        const orders = await Order.find()
            .populate('id_user', 'name')
            .populate('id_payment_method', 'name')
            .lean();

        const ordersWithDetails = await Promise.all(
            orders.map(async (order) => {
                const details = await OrderDetail.find({ id_order: order._id })
                    .populate('id_product', 'name price')
                    .lean();
                return { ...order, details }; // G√°n `details` v√†o m·ªói order
            })
        );

        return ordersWithDetails;
    }


    async getOrderById(orderId) {
        const order = await Order.findById(orderId)
            .populate("id_user", "name email")
            .populate("id_payment_method", "name")
            .lean();
        if (!order) return null;

        order.details = await OrderDetail.find({ id_order: order._id })
            .populate({
                path: "id_product",
                select: "name variants.price",
                model: "product" // ƒê·∫£m b·∫£o model ƒë√∫ng
            });
        return order;
    }


    async updateOrderStatus(id, status) {
        if (!["pending", "shipped", "delivered", "canceled"].includes(status)) {
            throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá");
        }

        const updatedOrder = await Order.findByIdAndUpdate(id, { status }, { new: true });

        if (!updatedOrder) {
            throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
        }

        return updatedOrder;
    };


    async deleteOrder(orderId) {
        const order = await Order.findByIdAndDelete(orderId);
        if (order) {
            await OrderDetail.deleteMany({ id_order: orderId });
        }
        return order;
    }
    async getOrdersByUserId(userId) {
        try {
            const orders = await Order.find({ id_user: userId })
                .populate("id_user", "username email")

                .populate("id_payment_method", "method")
                .sort({ createdAt: -1 });

            const orderIds = orders.map(order => order._id);
            const orderDetails = await OrderDetail.find({ id_order: { $in: orderIds } })
                .populate("id_product", "name price");

            return { orders, orderDetails };
        } catch (error) {
            throw new Error("L·ªói khi l·∫•y ƒë∆°n h√†ng c·ªßa user: " + error.message);
        }
    }

    async updateOrderTime(orderId, newCreatedAt) {
        try {
            const updatedOrder = await Order.findByIdAndUpdate(
                orderId,
                { createdAt: new Date(newCreatedAt) },
                { new: true }
            );

            if (!updatedOrder) {
                throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
            }

            return updatedOrder;
        } catch (error) {
            throw new Error("L·ªói khi c·∫≠p nh·∫≠t th·ªùi gian ƒë∆°n h√†ng: " + error.message);
        }
    }

}

module.exports = new OrderService();
