"use client";

import { useState, useEffect, useCallback } from "react";
import styles from "../../styles/CheckoutPage.module.css";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useRouter } from "next/navigation";

interface Address {
  name: string;
  phone: string;
  address: string;
  city: string;
  district: string;
  ward: string;
}

interface User {
  _id: string;
  email: string;
  address: Address[];
}

interface CartItem {
  id_product: string;
  _id: string;
  name: string;
  size: string;
  price: number;
  quantity: number;
  image: string;
  note?:string;
}

interface Coupon {
  _id: string;
  code: string;
  discount: number;
  type: string;
  start_date: string;
  end_date: string;
  status: string;
  quantity: number;
  description: string;
};


interface PaymentMethod {
  _id: string;
  payment_name: string;
}

const CheckoutPage = () => {
  const shippingFee = 30000;
  const [user, setUser] = useState<User | null>(null);
  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod | null>(
    null
  );
  const [cart, setCart] = useState<CartItem[]>([]);
  const [discountCode, setDiscountCode] = useState("");
  const [selectedCoupon, setSelectedCoupon] = useState<Coupon | null>(null);
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const API_URL = process.env.NEXT_PUBLIC_URL_IMAGE;
  const router = useRouter();

  const [discountApplied, setDiscountApplied] = useState<number>(0);
  const [appliedCoupon, setAppliedCoupon] = useState<Coupon | null>(null);


  // H√†m fetch API t√°i s·ª≠ d·ª•ng
  const fetchData = useCallback(async (url: string, errorMessage: string) => {
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error(errorMessage);
      return await response.json();
    } catch (error) {
      console.error(errorMessage, error);
      toast.error(errorMessage);
      return null;
    }
  }, []);

  
  useEffect(() => {
    const fetchPaymentMethods = async () => {
      const data = await fetchData(
        `${process.env.NEXT_PUBLIC_URL_IMAGE}/api/payments/`,
        "Kh√¥ng th·ªÉ l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n!"
      );
      if (data) {
        const filteredMethods = data.filter(
          (method: PaymentMethod) => method.payment_name !== "vnpay"
        );
        setPaymentMethods(filteredMethods);
        setPaymentMethod(filteredMethods[0] || null);
      }
    };
    fetchPaymentMethods();
  }, [fetchData]);

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  useEffect(() => {
    const fetchUser = async () => {
      const userId = localStorage.getItem("userId");
      if (!userId) return;
      const data = await fetchData(
        `${process.env.NEXT_PUBLIC_URL_IMAGE}/api/user/${userId}`,
        "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng!"
      );
      if (data) setUser(data);
    };
    fetchUser();
  }, [fetchData]);

  // L·∫•y gi·ªè h√†ng t·ª´ localStorage
  useEffect(() => {
    const fetchCart = () => {
      const cartData = localStorage.getItem("cart");
      if (cartData) {
        setCart(JSON.parse(cartData));
      }
    };
    fetchCart();
  }, []);

  // T√≠nh t·ªïng ti·ªÅn
  const totalAmount = cart.reduce(
    (total, item) => total + item.price * item.quantity,
    0
  );
  const finalAmount = Math.max(0, totalAmount + shippingFee - discountApplied);

  // X·ª≠ l√Ω m√£ gi·∫£m gi√°
  const handleCheckDiscountCode = async () => {
    try {
      const response = await fetch("http://localhost:3001/api/coupons");
      const result = await response.json();
      const coupon = result.data.find(
        (item) => item.code === discountCode.trim() 
      );
      if (!coupon) {
        toast.error("M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i!");
        return;
      }
      // Ki·ªÉm tra tr·∫°ng th√°i
      if (coupon.status !== "Active") {
        toast.error("M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng c√≤n hi·ªáu l·ª±c!");
        return;
      }
      // Ki·ªÉm tra th·ªùi gian
      const now = new Date();
      const start = new Date(coupon.start_date);
      const end = new Date(coupon.end_date);
      if (now < start || now > end) {
        toast.error("M√£ gi·∫£m gi√° kh√¥ng c√≤n trong th·ªùi gian s·ª≠ d·ª•ng!");
        return;
      }
      // Ki·ªÉm tra ƒë∆°n h√†ng t·ªëi thi·ªÉu (t·ª´ m√¥ t·∫£)
      const minOrderMatch = coupon.description.match(/ƒë∆°n h√†ng t·ª´ (\d+)k?/i);
      if (minOrderMatch) {
        const minOrder = parseInt(minOrderMatch[1]) * 1000;
        if (totalAmount < minOrder) {
          toast.error(`M√£ n√†y ch·ªâ √°p d·ª•ng cho ƒë∆°n h√†ng t·ª´ ${minOrder.toLocaleString()}ƒë tr·ªü l√™n!`);
          return;
        }
      }
      // √Åp d·ª•ng m√£
      setSelectedCoupon(coupon);
      setAppliedCoupon(coupon);
      setDiscountApplied(coupon.type === "Amount" ? coupon.discount : 0); // C√≥ th·ªÉ x·ª≠ l√Ω freeship ri√™ng ·ªü ƒë√¢y
      toast.success(`√Åp d·ª•ng m√£ "${coupon.code}" th√†nh c√¥ng!`);
    } catch (error) {
      console.error(error);
      toast.error("C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra m√£ gi·∫£m gi√°!");
    }
  };

  
  
  // X·ª≠ l√Ω ƒë·∫∑t h√†ng
  const handleOrder = async () => {
    if (!user) {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng!");
      return;
    }
    if (!paymentMethod) {
      toast.error("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!");
      return;
    }

    const orderData = {
      id_user: user._id,
      order_code: `MBM${Date.now()}`,
      id_coupon: appliedCoupon?._id || null,
      id_payment_method: paymentMethod?._id || "",
      total_amount: totalAmount,
      total_payment: finalAmount,
      address: user.address[0]?.address || "",
      phone: user.address[0]?.phone || "",
      name: user.address[0]?.name || "",
      receive_address: user.address[0]?.address || "",
      order_status: "Pending",
      payment_status: "Pending",
      orderDetails: cart.map((item) => ({
        id_product: item._id,
        name: item.name,
        quantity: item.quantity,
        price: item.price,
        note: item.note || "Kh√¥ng c√≥ ghi ch√∫",
      })),
    };

    const orderDetails = cart.map((item) => ({
      id_product: item._id,
      name: item.name,
      quantity: item.quantity,
      price: item.price,
      note: item.note || "Kh√¥ng c√≥ ghi ch√∫",
    }));

    // üõë Console log ƒë·ªÉ debug
    console.log("üõí Cart tr∆∞·ªõc khi g·ª≠i:", cart);
    console.log("üì¶ orderData tr∆∞·ªõc khi g·ª≠i:", orderData);
    console.log("üßæ orderDetails tr∆∞·ªõc khi g·ª≠i:", orderDetails);
    console.log("üí∞ Ph∆∞∆°ng th·ª©c thanh to√°n ƒë√£ ch·ªçn (_id):", paymentMethod);
    console.log("üéüÔ∏è M√£ gi·∫£m gi√° ƒë√£ ch·ªçn:", selectedCoupon?._id);

    try {
      const orderResponse = await fetch(
        `${process.env.NEXT_PUBLIC_URL_IMAGE}/api/orders`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ orderData, orderDetails }),
        }
      );

      const orderDataResponse = await orderResponse.json();
      console.log("üì¢ Ph·∫£n h·ªìi t·ª´ backend:", orderDataResponse);
      if (!orderResponse.ok) {
        throw new Error(orderDataResponse.error || "ƒê·∫∑t h√†ng th·∫•t b·∫°i!");
      }
      if (paymentMethod.payment_name === "cash") {
        console.log("üì¢ D·ªØ li·ªáu g·ª≠i ƒë·∫øn email API:", {
          email: user.email,
          orderData: orderDataResponse.data.order,
        });
        await fetch(`${process.env.NEXT_PUBLIC_URL_IMAGE}/api/email/send`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            email: user.email,
            orderData: {
              ...orderDataResponse.data.order,
              orderDetails: cart.map((item) => ({
                id_product: item._id,
                name: item.name,
                quantity: item.quantity,
                price: item.price,
                note: item.note || "Kh√¥ng c√≥ ghi ch√∫",
              })),
            },
          }),
        });
      }
      // X·ª≠ l√Ω thanh to√°n n·∫øu l√† MoMo
      if (paymentMethod.payment_name === "momo") {
        const momoResponse = await fetch(
          `${process.env.NEXT_PUBLIC_URL_IMAGE}/api/payments/momo`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              _id: orderDataResponse.data.order._id,
              id_user: orderDataResponse.data.order.id_user,
              order_code: orderDataResponse.data.order.order_code,
              amount: orderDataResponse.data.order.total_payment,
              id_coupon: orderDataResponse.data.order.id_coupon,
              order_status: orderDataResponse.data.order.order_status,
              payment_status: orderDataResponse.data.order.payment_status,
              receive_address: orderDataResponse.data.order.receive_address,
              id_payment_method: orderDataResponse.data.order.id_payment_method,
              address: orderDataResponse.data.order.address,
              phone: orderDataResponse.data.order.phone,
              name: orderDataResponse.data.order.name,
              note: orderDataResponse.data.order.note,
            }),
          }
        );

        const momoData = await momoResponse.json();
        if (!momoResponse.ok) {
          throw new Error(momoData.message || "L·ªói khi t·∫°o thanh to√°n Momo!");
        }

        window.location.href = momoData.payUrl;
        return;
      }

      toast.success("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
      localStorage.removeItem("cart");
      // üî• Ph√°t s·ª± ki·ªán c·∫≠p nh·∫≠t
      window.dispatchEvent(new Event("cartUpdated"));

      setCart([]);
      router.push(`/success?_id=${orderDataResponse.data.order._id}`);
    } catch (e) {
      toast.error(`L·ªói ƒë·∫∑t h√†ng: ${(e as Error).message}`);
    }
    // X·ª≠ l√Ω coupon sau khi √°p m√£ : 
    if (discountCode) {
      try {
        const response = await fetch("http://localhost:3001/api/coupons/apply-coupon", {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ code: discountCode }),
        });
    
        const data = await response.json();
        if (!response.ok) {
          console.error("‚ö†Ô∏è L·ªói:", data.message);
        } else {
          console.log("‚úÖ M√£ gi·∫£m gi√° √°p d·ª•ng th√†nh c√¥ng:", data);
        }
      } catch (error) {
        console.error("‚ö†Ô∏è L·ªói khi √°p d·ª•ng m√£ gi·∫£m gi√°:", error);
      }
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.checkoutForm}>
        <h2>TH√îNG TIN NH·∫¨N H√ÄNG</h2>
        <form>
          <label htmlFor="address" className={styles.formLabel}>
            S·ªë ƒë·ªãa ch·ªâ
          </label>
          <input
            type="text"
            id="address"
            className={styles.formInput}
            defaultValue={user?.address[0]?.address || ""}
          />

          <label htmlFor="email" className={styles.formLabel}>
            Email
          </label>
          <input
            type="email"
            id="email"
            className={styles.formInput}
            defaultValue={user?.email || ""}
          />

          <label htmlFor="name" className={styles.formLabel}>
            H·ªç v√† t√™n
          </label>
          <input
            type="text"
            id="name"
            className={styles.formInput}
            defaultValue={user?.address[0]?.name || ""}
          />

          <label htmlFor="phone" className={styles.formLabel}>
            S·ªë ƒëi·ªán tho·∫°i
          </label>
          <input
            type="tel"
            id="phone"
            className={styles.formInput}
            defaultValue={user?.address[0]?.phone || ""}
          />

          <label htmlFor="city" className={styles.formLabel}>
            T·ªânh th√†nh
          </label>
          <select id="city" className={styles.formSelect}>
            <option>{user?.address[0]?.city || ""}</option>
          </select>

          <label htmlFor="district" className={styles.formLabel}>
            Qu·∫≠n huy·ªán
          </label>
          <select id="district" className={styles.formSelect}>
            <option>{user?.address[0]?.district || ""}</option>
          </select>

          <label htmlFor="ward" className={styles.formLabel}>
            Ph∆∞·ªùng x√£
          </label>
          <select id="ward" className={styles.formSelect}>
            <option>{user?.address[0]?.ward || ""}</option>
          </select>

          <div className={styles.paymentOptions}>
            <label>Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
            <div>
              {paymentMethods.map((method) => (
                <label
                  key={method._id}
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                    marginBottom: "8px",
                  }}
                >
                  <input
                    type="radio"
                    name="paymentMethod"
                    value={method._id}
                    checked={paymentMethod?._id === method._id}
                    onChange={() => setPaymentMethod(method)}
                  />
                  {method.payment_name === "cash" ? (
                    <>
                      <img
                        src={`${API_URL}/images/cash.png`}
                        alt="Ti·ªÅn m·∫∑t"
                        width={24}
                        height={24}
                      />{" "}
                      Ti·ªÅn M·∫∑t
                    </>
                  ) : method.payment_name === "momo" ? (
                    <>
                      <img
                        src={`${API_URL}/images/momo.png`}
                        alt="Momo"
                        width={24}
                        height={24}
                      />{" "}
                      Chuy·ªÉn kho·∫£n Momo
                    </>
                  ) : (
                    method.payment_name
                  )}
                </label>
              ))}
            </div>
          </div>
        </form>
      </div>

      <div className={styles.orderSummary}>
        <h2>ƒê∆†N H√ÄNG ({cart.length} s·∫£n ph·∫©m)</h2>

        {cart.map((item, index) => (
          <div key={index} className={styles.orderItem}>
            <img
              className={styles.img}
              src={`${API_URL}/images/${item.image}`}
              alt={item.name}
              width={50}
              height={50}
            />
            <div>
              <p>{item.name}</p>
              <p>{item.size}</p>
              <p className={styles.price}>{item.price.toLocaleString()}ƒë</p>
              <p>S·ªë l∆∞·ª£ng: {item.quantity}</p>
            </div>
          </div>
        ))}

        <input
          type="text"
          placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
          value={discountCode}
          onChange={(e) => setDiscountCode(e.target.value)}
          className={styles.formInput}
        />
        <button className={styles.applyBtn} onClick={handleCheckDiscountCode}>
          √Åp d·ª•ng
        </button><br/><br/>
        {discountApplied > 0 && (
          <p className={styles.discountText}>Gi·∫£m : <strong>{discountApplied.toLocaleString()}ƒë</strong></p>
        )}
        <p>Ph√≠ v·∫≠n chuy·ªÉn: <strong>{shippingFee.toLocaleString()}ƒë</strong></p><br/>
        <p>T·ªïng gi√° ƒë∆°n h√†ng: <strong>{totalAmount.toLocaleString()}ƒë</strong></p>
        <br/><hr/><br/>
        <p>T·ªïng c·ªông:<strong> {finalAmount.toLocaleString()}ƒë</strong></p>
        <button className={styles.orderBtn} onClick={handleOrder}>
          ƒê·∫∂T H√ÄNG
        </button>
      </div>
    </div>
  );
};

export default CheckoutPage;
